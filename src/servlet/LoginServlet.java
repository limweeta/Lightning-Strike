package servlet;
import org.apache.catalina.util.Base64;

import javax.crypto.spec.SecretKeySpec;

import java.util.*;

import javax.crypto.*;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.URLEncoder;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import javax.servlet.http.*;
import javax.servlet.*;


@SuppressWarnings("serial")
public class LoginServlet extends HttpServlet {

	protected void doGet(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {
		
		processSSORequest(request,response);
		
	}
	
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException{
		
		processSSORequest(request,response);
		
	}
	
	public void processSSORequest(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		
		PrintWriter out = response.getWriter();
        HttpSession session = request.getSession();

		try {
			// if using non-default ports (other than 80 for http, 443 for https),
			// it should be included in the callback url below
			String callbackUrl = "http://" + request.getServerName() + ":" + request.getServerPort() + request.getRequestURI();
			//System.out.println(callbackUrl);
			String uri = "POST&" + encode(callbackUrl) + "&" ;
	
			String pairs = "";
			for (int i = 0 ; i < keys.length-1 ; i++) {
			    pairs += keys[i] + "=" + encode(request.getParameter(keys[i])) + "&";
			}
			//for-loop above stops before encoding the last key-value pair because
			// the last key-value pair doesnt need the trailing & character 
			pairs += keys[keys.length - 1] + "=" + encode(request.getParameter(keys[keys.length - 1]));
	
			uri += encode(pairs);
			            
			// initialize the Mac object
			Mac mac;
	
				mac = Mac.getInstance("HmacSHA1");

			SecretKey secretKey = new SecretKeySpec( (SECRET_KEY + "&").getBytes(), mac.getAlgorithm() );
			mac.init(secretKey);
	
			// generates the signature & retrieves server signature
			String generatedSignature = Base64.encode(mac.doFinal(uri.getBytes())).trim();
			String serverSignature = (request.getParameter("oauth_signature"));
			    
			// gets the time when the server generates the signature
			long serverSignatureTime = Long.parseLong(request.getParameter("oauth_timestamp"));
	
			// gets the current time in seconds
			long currentTime = System.currentTimeMillis() / 1000;
	
			// Checks the following:
			// 1. the two signatures (locally generated and generated by server) matche
			// 2. the difference between your local timestamp and 
			// the incoming timestamp fall within an acceptable interval (e.g. 30 seconds). 
			// You may adjust the allowance interval according to the time difference
			// between your server and the API server.  In general, it is not recommended
			// to set the interval more than 120 seconds (i.e. +/- 120 seconds)
	
			boolean check1 = serverSignature.equals(generatedSignature);
			boolean check2 = (Math.abs(serverSignatureTime - currentTime) <= 30);
			Calendar serverCal = Calendar.getInstance();
			Calendar yourCal = Calendar.getInstance();
			/*		System.out.println("Server timestamp: " + 
					new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(serverCal.setTimeInMillis(serverSignatureTime * 1000).getTime()));
			System.out.println("Your timestamp: " + 
					new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(yourCal.setTimeInMillis(currentTime * 1000).getTime()));;
	*/
			// Use this after syncing your system time with the server time
			// if(check1 && check2)  {
	
			// Use this for now to see if check1 works
			if (check1) {
				//Your app-specific code goes here
				out.println("You have successfully logged in");
			    session.setAttribute("username", request.getParameter("smu_username"));
			    session.setAttribute("fullname", request.getParameter("smu_fullname"));
				out.println("Session attributes have been set");
				out.println(session.getAttribute("username"));
				out.println(session.getAttribute("fullname"));
				response.sendRedirect("mainPage.jsp");
				
			} else {
			    out.println("There is an error in the login process. Please try again.");
			}
			
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
		    out.println("There is an error in the login process. Please try again.");
		} catch (InvalidKeyException e) {
			// TODO Auto-generated catch block
		    out.println("There is an error in the login process. Please try again.");
		} 
	}
	
	// Go to http://elearntools.smu.edu.sg/Tools/SSO/login.ashx?id=IS480PSAS
	// After logging in, you will be redirected to the callback URL: http://localhost:8080/is480-scheduling/login
	// Create a servlet having a servlet-mapping of the callback URL. The servlet has to dispatch the request object to this page

    // sorted in alphabetical order. ordering is important
    // when generating the signature
   private static final String[] keys =
   {
       "oauth_callback", 
       "oauth_consumer_key",
       "oauth_nonce",
       "oauth_signature_method",
       "oauth_timestamp",
       "oauth_version",
       "smu_domain",
       "smu_fullname",
       "smu_groups",
       "smu_username"};
   
   private static final String SECRET_KEY = "mstest2012";
   
   public static String encode(String plain) {
       try {
       String encoded = URLEncoder.encode(plain, "UTF-8");
       
       return encoded.replace("*", "%2A")
               .replace("+", "%20")
               .replace("%7E", "~");
       } catch (Exception e) {
           e.printStackTrace(); // hopefully this wont happen
       }
       return "";
   }
}

